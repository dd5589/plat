import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import LabeledPrice, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncpg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò –î–ê–ù–ù–´–ï)
BOT_TOKEN = "8474649656:AAG5motuAPtiezNfxG0yT8AFW4732ZIDTY4"
PAYMENT_TOKEN = "2051251535:TEST:OTk5MDA4ODgxLTAwNQ"  # –¢–æ–∫–µ–Ω –æ—Ç @BotFather –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
DB_USER = "postgres"
DB_PASSWORD = "callofdutyer"
DB_NAME = "ticket_bot"
DB_HOST = "localhost"
DB_PORT = "5432"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –û–ø–∏—Å–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤
ticket_types = {
    "dancefloor": {"name": "–¢–∞–Ω—Ü–ø–æ–ª", "price": 1999},
    "pair": {"name": "–ü–∞—Ä–Ω—ã–π —Ç–∞–Ω—Ü–ø–æ–ª", "price": 3799},
    "early": {"name": "–¢–∞–Ω—Ü–ø–æ–ª (–†–∞–Ω–Ω–∏–π –≤—Ö–æ–¥)", "price": 2399}
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TicketState(StatesGroup):
    waiting_for_quantity = State()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
async def create_db_pool():
    return await asyncpg.create_pool(
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME,
        host=DB_HOST,
        port=DB_PORT
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db(conn):
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–∏–ª–µ—Ç–æ–≤
    await conn.execute("""
    CREATE TABLE IF NOT EXISTS tickets (
        ticket_type VARCHAR(50) PRIMARY KEY,
        stock INTEGER NOT NULL
    );
    """)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–∫—É–ø–æ–∫
    await conn.execute("""
    CREATE TABLE IF NOT EXISTS purchases (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        username VARCHAR(100),
        full_name VARCHAR(100),
        ticket_type VARCHAR(50) NOT NULL,
        quantity INTEGER NOT NULL,
        amount INTEGER NOT NULL,
        purchase_date TIMESTAMP DEFAULT NOW()
    );
    """)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –±–∏–ª–µ—Ç–æ–≤
    for ticket_type, info in ticket_types.items():
        await conn.execute("""
        INSERT INTO tickets (ticket_type, stock)
        VALUES ($1, 10)
        ON CONFLICT (ticket_type) DO UPDATE SET stock = EXCLUDED.stock
        """, ticket_type)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
async def get_ticket_stocks(conn):
    stocks = {}
    records = await conn.fetch("SELECT ticket_type, stock FROM tickets")
    for record in records:
        stocks[record['ticket_type']] = record['stock']
    return stocks

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
async def update_ticket_stock(conn, ticket_type, quantity):
    await conn.execute("""
    UPDATE tickets SET stock = stock - $1 
    WHERE ticket_type = $2
    """, quantity, ticket_type)
    return await conn.fetchval("SELECT stock FROM tickets WHERE ticket_type = $1", ticket_type)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã"))
    builder.add(types.KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"))
    builder.add(types.KeyboardButton(text="üìä –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏"))
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ madk1d!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏")
async def event_info(message: types.Message):
    await message.answer(
        "üé§ madk1d | 9 –ê–≤–≥—É—Å—Ç–∞ | –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫\n"
        "üìÖ –°—É–±–±–æ—Ç–∞, 9 –∞–≤–≥—É—Å—Ç–∞ 2025\n"
        "üïí 18:00 - 22:00\n"
        "üìç –†—É–∫–∏ –í–í–µ—Ä—Ö! –ë–∞—Ä, –ö—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 37\n"
        "üîû –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 18+"
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã
@dp.message(F.text == "üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã")
async def show_tickets(message: types.Message):
    async with db_pool.acquire() as conn:
        stocks = await get_ticket_stocks(conn)
        
        builder = InlineKeyboardBuilder()
        for ticket_type, info in ticket_types.items():
            stock = stocks.get(ticket_type, 0)
            if stock > 0:
                builder.add(types.InlineKeyboardButton(
                    text=f"{info['name']} ({stock} —à—Ç.) - {info['price']} —Ä—É–±.",
                    callback_data=f"ticket_{ticket_type}"
                ))
        
        builder.adjust(1)
        await message.answer("üéü –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–ª–µ—Ç—ã:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∏–ª–µ—Ç–∞
@dp.callback_query(F.data.startswith("ticket_"))
async def select_ticket(callback: types.CallbackQuery, state: FSMContext):
    ticket_type = callback.data.split("_")[1]
    
    if ticket_type not in ticket_types:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–∏–ª–µ—Ç–∞", show_alert=True)
        return
    
    async with db_pool.acquire() as conn:
        stock = await conn.fetchval("SELECT stock FROM tickets WHERE ticket_type = $1", ticket_type)
        
        if not stock or stock <= 0:
            await callback.answer("–≠—Ç–∏ –±–∏–ª–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!", show_alert=True)
            return
        
        await state.update_data(ticket_type=ticket_type)
        await state.set_state(TicketState.waiting_for_quantity)
        
        ticket = ticket_types[ticket_type]
        await callback.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {ticket['name']}\n"
            f"–¶–µ–Ω–∞: {ticket['price']} —Ä—É–±.\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {stock} —à—Ç.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤:",
            reply_markup=ReplyKeyboardRemove()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤
@dp.message(TicketState.waiting_for_quantity, F.text.isdigit())
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
            return
        
        data = await state.get_data()
        ticket_type = data.get('ticket_type')
        
        if not ticket_type:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –±–∏–ª–µ—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        async with db_pool.acquire() as conn:
            stock = await conn.fetchval("SELECT stock FROM tickets WHERE ticket_type = $1", ticket_type)
            
            if stock < quantity:
                await message.answer(f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {stock} —à—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
                return
            
            ticket = ticket_types[ticket_type]
            amount = ticket['price'] * quantity
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã
            await bot.send_invoice(
                chat_id=message.chat.id,
                title=f"–ë–∏–ª–µ—Ç—ã: {ticket['name']}",
                description=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.",
                payload=f"{ticket_type}_{quantity}_{message.from_user.id}",
                provider_token=PAYMENT_TOKEN,
                currency="RUB",
                prices=[LabeledPrice(label=f"{quantity} –±–∏–ª–µ—Ç(–∞)", amount=amount * 100)],
                need_phone_number=True,
                need_email=True
            )
            
            await state.clear()
            
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
@dp.pre_checkout_query()
async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    try:
        payload = message.successful_payment.invoice_payload
        parts = payload.split('_')
        if len(parts) < 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload")
            
        ticket_type = parts[0]
        quantity = int(parts[1])
        user_id = int(parts[2])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if message.from_user.id != user_id:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–µ
        ticket_info = ticket_types.get(ticket_type)
        if not ticket_info:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–∏–ª–µ—Ç–∞")
            return
        
        amount = message.successful_payment.total_amount // 100
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with db_pool.acquire() as conn:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
            await update_ticket_stock(conn, ticket_type, quantity)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            await conn.execute("""
            INSERT INTO purchases (
                user_id, username, full_name, 
                ticket_type, quantity, amount
            ) VALUES ($1, $2, $3, $4, $5, $6)
            """, 
            message.from_user.id,
            message.from_user.username,
            message.from_user.full_name,
            ticket_type,
            quantity,
            amount)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n"
            f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {quantity} –±–∏–ª–µ—Ç(–∞) –Ω–∞ {ticket_info['name']}\n"
            f"–°—É–º–º–∞: {amount} —Ä—É–±.\n\n"
            "–í–∞—à–∏ –±–∏–ª–µ—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –Ω–∞ email –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer(
            "–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥: "
            f"{message.successful_payment.telegram_payment_charge_id}"
        )

# –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
@dp.message(F.text == "üìä –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")
async def show_purchases(message: types.Message):
    try:
        async with db_pool.acquire() as conn:
            purchases = await conn.fetch("""
            SELECT ticket_type, quantity, amount, purchase_date 
            FROM purchases 
            WHERE user_id = $1 
            ORDER BY purchase_date DESC
            """, message.from_user.id)
        
        if not purchases:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.")
            return
        
        response = ["üìã –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:\n"]
        for purchase in purchases:
            ticket_name = ticket_types.get(purchase['ticket_type'], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∏–ª–µ—Ç')
            response.append(
                f"üé´ {ticket_name}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {purchase['quantity']} —à—Ç.\n"
                f"–°—É–º–º–∞: {purchase['amount']} —Ä—É–±.\n"
                f"–î–∞—Ç–∞: {purchase['purchase_date'].strftime('%d.%m.%Y %H:%M')}\n"
            )
        
        await message.answer("\n".join(response))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫—É–ø–æ–∫: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    global db_pool
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
        db_pool = await create_db_pool()
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with db_pool.acquire() as conn:
            await init_db(conn)
            stocks = await get_ticket_stocks(conn)
            logger.info(f"–û—Å—Ç–∞—Ç–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {stocks}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if db_pool:
            await db_pool.close()
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == '__main__':
    asyncio.run(main())